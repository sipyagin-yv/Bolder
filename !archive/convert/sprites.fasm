                format  PE CONSOLE                include 'win32wx.inc'                section '.data' readablefont8x8:        file    'fnt8x8.bin'newfontfname    du      'font256_8x14.bin', 0newfontfnameZ   du      'font256_8x14z.bin', 0translHEX       du      '0123456789ABCDEF'; Таблица спрайтов, 94 штуки по 9 байт; 1-й байт - цвет, остальные 8 - сам спрайтSPRT:           DB      07h,'        ';00       - пустота                DB      0Fh,' ';01       - камень (падают, прибивают)                DB      0Bh,'/*\ \*/ ';02       - алмаз (падают, прибивают)                DB      07h,'::::::::';03       - земля                DB      0Ch,'';04       - кирпич (уничтожаемый)                DB      0Fh,'O  ';05       - человечек (грызет алмазы)                DB      0Ah,'### ### ';06       - звери (охотятся на человечка)                DB      0Ch,'';07       - бетон (неуничтожаемый)                ; Спрайты - движение                DB      0Bh,'/*\ \*/ ';08                DB      07h,'        ';09                DB      0Bh,'\*/     ';10       - алмаз падает вниз (11,10)                DB      0Bh,'    /*\ ';11                DB      07h,'        ';12                DB      07h,'        ';13                DB      07h,'        ';14                DB      0Fh,'     ';15       - камень падает вниз (16,15)                DB      0Fh,'    ';16                ; Спрайты человечка                DB      0Fh,'O  ';17                DB      0Fh,'     ';18                DB      0Fh,'    O ';19                DB      0Fh,'    O ';20                DB      0Fh,'    O ';21                DB      0Fh,'   O  ';22                DB      0Fh,'      ';23                DB      0Fh,' O  ';24                DB      0Fh,'  O  ',7;25                DB      0Fh,'       ';26                DB      0Fh,'O   ';27                ; Спрайты существ                DB      0Ah,'+++ +++ ';28                DB      0Ah,'+   +   ';29                DB      0Ah,'+   +   ';30                DB      0Ah,'  ++  ++';31                DB      0Ah,'+++     ';32                DB      0Ah,'    +++ ';33                DB      0Ah,'    +++ ';34                DB      0Ah,'/ /  / /';35                DB      0Ah,'+   +   ';36                DB      0Ah,'+   +   ';37                DB      0Ah,'    +++ ';38                DB      0Ah,'    +++ ';39                DB      0Ah,'    +++ ';40                DB      0Ah,'    +++ ';41                ; Это у нас курсор для редактирования лабиринта                DB      0Fh,'';42                 ; Заготовки для надписей LIVES, SCORE                DB      0Eh,'       ';43                DB      0Eh,'   ';44                DB      0Eh,'     ',7,' ';45                DB      0Eh,'    ';46                DB      0Eh,'     ';47                DB      0Eh,7,' ';48                DB      0Eh,'    ';49                DB      0Eh,' ';50                DB      0Eh,'    ';51                DB      0Eh,'',7,'';52                DB      0Eh,'   ',7,'';53                DB      0Eh,'    ',7,'';54                DB      0Eh,' ',7,'';55                DB      0Eh,'    ',7,'';56                DB      0Eh,'';57                DB      0Eh,'       ';58                DB      0Eh,'       ';59                ; Цифры, верхние части                DB      0Fh,'',7,'';60                DB      0Fh,'    ';61                DB      0Fh,' ';62                DB      0Fh,' ',7,'',7,'';63                DB      0Fh,'   ';64                DB      0Fh,'',7,'',7,'';65                DB      0Fh,'',7,'',7,'';66                DB      0Fh,'    ';67                DB      0Fh,'',7,'',7,'';68                DB      0Fh,7,'';69                ; Тоже цифры, нижние части                DB      0Fh,'    ';70                DB      0Fh,'      ';71                DB      0Fh,'    ',7,'';72                DB      0Fh,'    ',7,'';73                DB      0Fh,'      ';74                DB      0Fh,'    ';75                DB      0Fh,'    ';76                DB      0Fh,'    ',7,'';77                DB      0Fh,'    ',7,'';78                DB      0Fh,'    ',7,'';79                ; Заготовки для заставки (надпись BOLDER)                DB      0Fh,'      ';80                DB      0Fh,'      ';81                DB      0Fh,'    ';82                DB      0Fh,'      ';83                DB      0Fh,'    ';84                DB      0Fh,'    ';85                DB      0Fh,'  ';86                DB      0Fh,'      ';87                DB      0Fh,'    ';88                DB      0Fh,'    ';89                DB      0Fh,'  ';90                DB      0Fh,'    ';91                DB      0Fh,'  ';92                DB      0Fh,'  ';93 .size          =       $-SPRTfilename        du      'sprites.inc', 0head0           du      'SPRT:           DB      ',0head1           du      '                DB      ',0footer1         du      ' .size          =       $-SPRT', 13, 10, 0crlf            du      13, 10, 0                section '.udata' readable writeablebuffer          rd      1000000fontdata        rb      256*14fontdata_compressed rb      5000fontdata_decompressed rd    5000                section '.code' readable executablestart:                          ;                mov     esi, font8x8                mov     edi, fontdata2                mov     ecx, 128 .L10:          movsb        repeat 6                lodsb                stosb                stosb        end repeat                movsb                dec     ecx                jnz     .L10                xor     eax, eax                mov     ecx, 128*14/4                rep     stosd                stdcall SaveFile, newfontfname, fontdata2, 256*14                call    compressfont                ;;;                ;;;                mov     edi, buffer                ;                mov     ecx, 0                mov     esi, SPRT .L1:           push    ecx esi                ; ecx = counter                ; esi = addr to sprite                mov     eax, head0                cmp     ecx, 0                je      .A1                mov     eax, head1  .A1:          stdcall copytobuffer, eax                lodsb                                   ; COLOR                call    hextobuffer                mov     ax, ','                stosw                mov     ax, ' '                stosw        repeat 7                lodsb                call    hextobuffer                mov     ax, ','                stosw        end repeat                lodsb                call    hextobuffer                mov     ax, ';'                stosw                mov     eax, ecx                call    decimaltobuffer                stdcall copytobuffer, crlf                pop     esi ecx                add     esi, 9                inc     ecx                cmp     ecx, 93                jbe     .L1                stdcall copytobuffer, footer1                mov     ecx, edi                sub     ecx, buffer                                stdcall SaveFile, filename, buffer, ecx                        retproc            decimaltobuffer                push    eax ecx edx                mov     ecx, 10                push    -1 .L1:           mov     edx, 0          ; div by 10                div     ecx                push    edx             ; store remainder                or      eax, eax                jnz     .L1 .L3:           pop     eax             ; restore remainter in reverse order                cmp     eax, -1                je      .L2                add     al, '0'         ; bin -> char                stosw                jmp     .L3 .L2:           pop     edx ecx eax                retendpproc            hextobuffer                push    eax                shr     al, 4                and     eax, 0fh                mov     ax, [eax*2 + translHEX]                stosw                pop     eax                and     eax, 0fh                mov     ax, [eax*2 + translHEX]                stosw                mov     ax, 'h'                stosw                retendpproc            copytobuffer uses eax esi, msg:DWORD                mov     esi, [msg] .L1:           lodsw                stosw                or      ax, ax                jnz     .L1                sub     edi, 2                retendpproc            message msg:DWORD                local   chWritten:DWORD                pushad                mov     edi, [msg]                mov     ecx, -1                xor     ax, ax                repne   scasw                sub     edi, [msg]                shr     edi, 1                push    edi                invoke  GetStdHandle, STD_OUTPUT_HANDLE                pop     edi                invoke  WriteConsole, eax, [msg], edi, addr chWritten, NULL                popad                retendpproc            SaveFile        fileName:DWORD, fileBuffer:DWORD, fileSize:DWORD                local   h:DWORD                local   fileWritten:DWORD                ; create                invoke  CreateFile, [fileName], GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL                mov     [h], eax                or      eax, eax                jz      .FAIL                ; write                invoke  WriteFile, [h], [fileBuffer], [fileSize], addr fileWritten, NULL                or      eax, eax                jz      .FAIL                mov     eax, [fileWritten]                cmp     eax, [fileSize]                jne     .FAIL                ; close                invoke  CloseHandle, [h]                xor     eax, eax                ret .FAIL:         mov     eax, -1                retendpproc            compressfont                mov     esi, fontdata                mov     edi, fontdata_compressed                mov     ecx, 256*14                mov     edx, esi                ; prev ptr                ; Подсчитать повторения символа                mov     al, [esi]                push    edi ecx                mov     edi, esi                mov     ecx,                                 ret                endpproc            decompress                mov     esi, fontdata_compressed                mov     edi, fontdata_decompressed .L0:           movsx   ecx, byte [esi]                inc     esi                or      ecx, ecx                js      .L1                jecxz   .Done                rep     movsb                jmp     .L0 .L1:           neg     ecx                lodsb                rep     stosb                jmp     .L0 .Done:         ret                endp                .end    start