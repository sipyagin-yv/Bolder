                format  PE CONSOLE
                include "win32wx.inc"
                include "macros.inc"
                include "utils.inc"
                include "io.inc"
                include "resource.inc"
                include "crc32.inc"
                include "ac_buffer.inc"
                include "ac_bits.inc"
                include "strings.inc"

                .const
title           du      'ArithCoderDecoder written in assembler, version 1.00, 05/03/2016', 13, 10, 13, 10, 0
msgLoadFail     du      13,10,'FAIL: load file', 13, 10, 0
msgSaveFail     du      13,10,'FAIL: save file', 13, 10, 0
msgCompareFail  du      13,10,'FAIL: compare files', 13, 10, 0
compressmsg     du      'COMPRESS', 0
decompressmsg   du      'DECOMPRESS', 0
comparemsg      du      'COMPARE', 0
genBolderBin    du      'CREATE BOLDER.BIN', 0
bitACmsg        du      'ENCODE/DECODE BY BIT-ORIENTED AC', 0
donemsg         du      ', done', 13, 10, 13, 10, 0

fn_demos_mask1  du      'Y:\Projects\Boulder MY (win16)\!demos\DEM_', 0
fn_demos_mask2  du      '.BIN', 0
fn_bolder_bin   du      'bolder.bin', 0
fn_compressed   du      'levels.ac', 0
fn_decompressed du      'levels.decoded', 0
fn_levels       du      'levels.bin', 0
                ; Statistic
fn_freq_enc     du      'levels.freq_enc', 0
fn_freq_dec     du      'levels.freq_dec', 0
                ;
resCopyright    db      'Bolder 2.3 PC resource file. Encoded by AC. YSoft (C) 2016'

                .udata
_buffer_source  rb      100000
_buffer_encode  rb      100000
_buffer_decode  rb      100000
_compare1       rb      100000
_compare2       rb      100000
                ;
_buffer_demo    rb      100000
_buffer_demo_compressed rb 100000
                ;
_levels         rb      100000
_levels_compr   rb      100000
_levels_resource rb     100000
                ;
_buffer1        rb      100000
_buffer2        rb      100000
                ;
fn_buffer       rb      1000

                .const
_src1           db      1000 DUP(0ffh)

                .code
start:          mov     eax, AC2_END-AC2_BEGIN

                mov     ebx, AC_END-AC_BEGIN

                MSG     title

                ;=== BIT-ORIENTED ENCODER/DECODER =============================
                MSG     bitACmsg
                LOAD    fn_levels, _buffer1, _buffer1.size, .fail_load
                ; ENCODE
                mov     eax, _buffer_encode
                call    AC_EncodeStart
                ;
                mov     ecx, 38400
                mov     esi, _buffer1
 .Loop1:        lodsb
                mov     bl, 3
                call    AC_EncodeBits
                loop    .Loop1
                ;
                call    AC_EncodeEnd

                ; DECODE
                mov     eax, _buffer_encode
                call    AC_DecodeStart
                ;
                mov     ecx, 38400
                mov     edi, _buffer2
 .Loop2:        mov     bl, 3
                call    AC_DecodeBits                   ; bit 2
                stosb
                loop    .Loop2
                ;
                call    AC_DecodeEnd

                ; COMPARE
                mov     esi, _buffer1
                mov     edi, _buffer2
                mov     ecx, 38400
                rep cmpsb
                jne     .fail_compare
                MSG     donemsg


                ;=== COMPILE RESOURCE FILE ====================================
                MSG     genBolderBin
                LOAD    fn_levels, _levels, _levels.size, .fail_load

                call    crc32InitTable
                mov     edi, _levels_resource
                mov     eax, 200+200+1
                call    InitResource
                mov     esi, resCopyright
                mov     edi, (200+200+1) - 1
                mov     ecx, resCopyright.size
                call    ReplaceResource
                ; Формируем лабиринты
                xor     ebp, ebp
 .LoopLevCompr: imul    esi, ebp, 192
                add     esi, _levels
                mov     edi, _levels_compr
                mov     ecx, 192
                call    EncodeAC
                mov     edi, ebp
                mov     esi, _levels_compr
                mov     ecx, [esi + AC_Header.pk_len]
                add     esi, sizeof.AC_Header
                call    ReplaceResource
                inc     ebp
                cmp     ebp, 200
                jb      .LoopLevCompr
                ; Формируем демки
                xor     ebp, ebp
 .LoopLevDemo:  mov     esi, fn_demos_mask1
                mov     edi, fn_buffer
                movsz
                lea     eax, [ebp+1]
                mov     ebx, 10
              repeat 3
                xor     edx, edx
                div     ebx
                add     edx, '0'
                mov     [edi + (3-%)*2], dx
              end repeat
                add     edi, 6
                mov     esi, fn_demos_mask2
                movsz
                LOAD    fn_buffer, _buffer_demo, _buffer_demo.size, .L1
                ENC_AC  _buffer_demo, _buffer_demo_compressed, eax
                ;
                mov     edi, ebp
                add     edi, 200
                ;
                mov     esi, _buffer_demo_compressed
                mov     ecx, [esi + AC_Header.pk_len]
                mov     edx, [esi + AC_Header.src_len]
                add     esi, sizeof.AC_Header
                ; формируем длину разжатого блока, затирая AC_Header
                sub     esi, 2
                add     ecx, 2
                mov     word [esi], dx
                call    ReplaceResource
                ;
 .L1:           inc     ebp
                cmp     ebp, 200
                jb      .LoopLevDemo

                lea     eax, [_levels_resource]
                mov     eax, [eax + ResourceMainHeader.size]
                SAVE    fn_bolder_bin, _levels_resource, eax, .fail_save
                MSG     donemsg

                ;=== COMPRESS =================================================
                MSG     compressmsg
                LOAD    fn_levels, _buffer_source, _buffer_source.size, .fail_load
                ENC_AC  _buffer_source, _buffer_encode, eax
                ;
                lea     esi, [_buffer_encode]
                mov     eax, [esi+AC_Header.pk_len]
                add     eax, sizeof.AC_Header
                ;
                SAVE    fn_compressed, _buffer_encode, eax, .fail_save
                ;SAVE    fn_freq_enc, model_freq, sizeof.model_freq_item * MODEL_COUNT, .fail_save
                MSG     donemsg

                ;=== DECOMPRESS ===============================================
                MSG     decompressmsg
                LOAD    fn_compressed, _buffer_source, _buffer_source.size, .fail_load
                DEC_AC  _buffer_source, _buffer_decode
                ;
                lea     esi, [_buffer_source]
                mov     eax, [esi+AC_Header.src_len]
                ;
                SAVE    fn_decompressed, _buffer_decode, eax, .fail_save
                ;SAVE    fn_freq_dec, model_freq, sizeof.model_freq_item * MODEL_COUNT, .fail_save
                MSG     donemsg

                ;=== COMPARE ==================================================
                MSG     comparemsg
                LOAD    fn_levels, _compare1, _compare1.size, .fail_load
                mov     esi, eax
                LOAD    fn_decompressed, _compare2, _compare2.size, .fail_load
                mov     edi, eax
                ;
                cmp     esi, edi
                jne     .fail_compare
                mov     ecx, esi
                mov     esi, _compare1
                mov     edi, _compare2
                rep cmpsb
                jne     .fail_compare
                MSG     donemsg

                ;=== DONE =====================================================
                xor     eax, eax
                ret

 .fail_compare: MSG     msgCompareFail
                ret
 .fail_load:    MSG     msgLoadFail
                ret
 .fail_save:    MSG     msgSaveFail
                ret

                END
